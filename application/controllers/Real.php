<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Real extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Real_model');
        $this->load->library('form_validation');        
	$this->load->library('datatables');
    }

    public function index()
    {
        $this->load->view('real/real_list');
    } 
    
    public function json() {
        header('Content-Type: application/json');
        echo $this->Real_model->json();
    }

    public function read($id) 
    {
        $row = $this->Real_model->get_by_id($id);
        if ($row) {
            $data = array(
		'id' => $row->id,
		'branch' => $row->branch,
		'pn' => $row->pn,
		'tgl_real' => $row->tgl_real,
		'plafon' => $row->plafon,
		'code_desc' => $row->code_desc,
	    );
            $this->load->view('real/real_read', $data);
        } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('real'));
        }
    }

    public function create() 
    {
        $data = array(
            'button' => 'Create',
            'action' => site_url('real/create_action'),
	    'id' => set_value('id'),
	    'branch' => set_value('branch'),
	    'pn' => set_value('pn'),
	    'tgl_real' => set_value('tgl_real'),
	    'plafon' => set_value('plafon'),
	    'code_desc' => set_value('code_desc'),
	);
        $this->load->view('real/real_form', $data);
    }
    
    public function create_action() 
    {
        $this->_rules();

        if ($this->form_validation->run() == FALSE) {
            $this->create();
        } else {
            $data = array(
		'branch' => $this->input->post('branch',TRUE),
		'pn' => $this->input->post('pn',TRUE),
		'tgl_real' => $this->input->post('tgl_real',TRUE),
		'plafon' => $this->input->post('plafon',TRUE),
		'code_desc' => $this->input->post('code_desc',TRUE),
	    );

            $this->Real_model->insert($data);
            $this->session->set_flashdata('message', 'Create Record Success');
            redirect(site_url('real'));
        }
    }
    
    public function update($id) 
    {
        $row = $this->Real_model->get_by_id($id);

        if ($row) {
            $data = array(
                'button' => 'Update',
                'action' => site_url('real/update_action'),
		'id' => set_value('id', $row->id),
		'branch' => set_value('branch', $row->branch),
		'pn' => set_value('pn', $row->pn),
		'tgl_real' => set_value('tgl_real', $row->tgl_real),
		'plafon' => set_value('plafon', $row->plafon),
		'code_desc' => set_value('code_desc', $row->code_desc),
	    );
            $this->load->view('real/real_form', $data);
        } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('real'));
        }
    }
    
    public function update_action() 
    {
        $this->_rules();

        if ($this->form_validation->run() == FALSE) {
            $this->update($this->input->post('id', TRUE));
        } else {
            $data = array(
		'branch' => $this->input->post('branch',TRUE),
		'pn' => $this->input->post('pn',TRUE),
		'tgl_real' => $this->input->post('tgl_real',TRUE),
		'plafon' => $this->input->post('plafon',TRUE),
		'code_desc' => $this->input->post('code_desc',TRUE),
	    );

            $this->Real_model->update($this->input->post('id', TRUE), $data);
            $this->session->set_flashdata('message', 'Update Record Success');
            redirect(site_url('real'));
        }
    }
    
    public function delete($id) 
    {
        $row = $this->Real_model->get_by_id($id);

        if ($row) {
            $this->Real_model->delete($id);
            $this->session->set_flashdata('message', 'Delete Record Success');
            redirect(site_url('real'));
        } else {
            $this->session->set_flashdata('message', 'Record Not Found');
            redirect(site_url('real'));
        }
    }

    public function _rules() 
    {
	$this->form_validation->set_rules('branch', 'branch', 'trim|required');
	$this->form_validation->set_rules('pn', 'pn', 'trim|required');
	$this->form_validation->set_rules('tgl_real', 'tgl real', 'trim|required');
	$this->form_validation->set_rules('plafon', 'plafon', 'trim|required');
	$this->form_validation->set_rules('code_desc', 'code desc', 'trim|required');

	$this->form_validation->set_rules('id', 'id', 'trim');
	$this->form_validation->set_error_delimiters('<span class="text-danger">', '</span>');
    }

}

/* End of file Real.php */
/* Location: ./application/controllers/Real.php */
/* Please DO NOT modify this information : */
/* Generated by Harviacode Codeigniter CRUD Generator 2022-01-08 19:32:52 */
/* http://harviacode.com */